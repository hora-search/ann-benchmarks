float:
  euclidean:
    hora-HNSWIndex:
      docker-tag: ann-benchmarks-hora
      module: ann_benchmarks.algorithms.hora
      constructor: Hora
      base-args: ["euclidean"]
      run-groups:
        main:
          arg-groups: 
            - {"n_neighbor": 16,  "n_neighbor0": 32, "index": "HNSWIndex"}
          query-args: [[50, 70, 90, 120, 160, 200, 400, 600]]
        M-1:
          arg-groups:
            - {"n_neighbor": 8,  "n_neighbor0": 16, "index": "HNSWIndex"}
          query-args: [[50, 70, 90, 120, 160, 200, 400, 600]]
        M-2:
          arg-groups:
            - {"n_neighbor": 12,  "n_neighbor0": 24, "index": "HNSWIndex"}
          query-args: [[50, 70, 90, 120, 160, 200, 400, 600]]
        M-3:
          arg-groups:
            - {"n_neighbor": 24,  "n_neighbor0": 32, "index": "HNSWIndex"}
          query-args: [[50, 70, 90, 120, 160, 200, 400, 600]]
    hora-SGGIndex:
      docker-tag: ann-benchmarks-hora
      module: ann_benchmarks.algorithms.hora
      constructor: Hora
      base-args: ["euclidean"]
      run-groups:
        main:
          arg-groups:
            - {"angle": 60.0,  "index_size": 20, "neighbor_neighbor_size": 20, "root_size": 128, "index": "SSGIndex"}
          query-args: [[50, 70, 90, 120, 160, 200, 400, 600]]
        M-1:
          arg-groups:
            - {"angle": 60.0,  "index_size": 20, "neighbor_neighbor_size": 20, "root_size": 256, "index": "SSGIndex"}
          query-args: [[50, 70, 90, 120, 160, 200, 400, 600]]
        M-2:
          arg-groups:
            - {"angle": 30.0,  "index_size": 20, "neighbor_neighbor_size": 20, "root_size": 256, "index": "SSGIndex"}
          query-args: [[50, 70, 90, 120, 160, 200, 400, 600]]
        M-3:
          arg-groups:
            - {"angle": 30.0,  "index_size": 50, "neighbor_neighbor_size": 50, "root_size": 256, "index": "SSGIndex"}
          query-args: [[50, 70, 90, 120, 160, 200, 400, 600]]
    hnsw(nmslib):
      docker-tag: ann-benchmarks-nmslib
      module: ann_benchmarks.algorithms.nmslib
      constructor: NmslibReuseIndex
      base-args: ["@metric", "hnsw"]
      run-groups:
        M-32:
          # If a run group has an array called @arg-groups instead of one
          # called @args, then every element in that array will be separately
          # expanded before then taking the Cartesian product of all of those
          # expansions.
          #
          # Yes, this is a bit of a hack, but some constructors are weird.
          # (This one used to require that dictionaries be encoded as lists
          # of environment variable-style strings -- ["M=32", "post=2",
          # "efConstruction=400"] -- which didn't work with this at all...)
          arg-groups:
            - {"M": 32, "post": 2, "efConstruction": 400}
            - False
          query-args: [[20, 30, 40, 50, 60, 70, 80, 90, 100, 120, 140, 160, 200,
              300, 400]]
        M-20:
          arg-groups:
            - {"M": 20, "post": 2, "efConstruction": 400}
            - False
          query-args: [[2, 5, 10, 15, 20, 30, 40, 50, 70, 80, 120, 200, 400]]
        M-12:
          arg-groups:
            - {"M": 12, "post": 0, "efConstruction": 400}
            - False
          query-args: [[1, 2, 5, 10, 15, 20, 30, 40, 50, 70, 80, 120]]
        M-4:
          arg-groups:
            - {"M": 4, "post": 0, "efConstruction": 400}
            - False
          query-args: [[1, 2, 5, 10, 20, 30, 50, 70, 90, 120]]
        M-8:
          arg-groups:
            - {"M": 8, "post": 0, "efConstruction": 400}
            - False
          query-args: [[1, 2, 5, 10, 20, 30, 50, 70, 90, 120, 160]]
    pynndescent:
      docker-tag: ann-benchmarks-pynndescent
      module: ann_benchmarks.algorithms.pynndescent
      constructor: PyNNDescent
      base-args: ["@metric"]
      run-groups:
        NN-10:
          arg-groups:
            - {"n_neighbors": 10, "diversify_prob": 1.0,
               "pruning_degree_multiplier":[0.5, 1.0], "leaf_size": 24}
          query-args: [[0.0, 0.01, 0.02, 0.03, 0.04, 0.06, 0.08, 0.10, 0.12]]
        NN-20:
          arg-groups:
            - {"n_neighbors": 20, "diversify_prob": 1.0,
               "pruning_degree_multiplier":[0.75, 1.5], "leaf_size": 24}
          query-args: [[0.0, 0.02, 0.04, 0.06, 0.08, 0.10, 0.12, 0.14, 0.16, 0.20]]
        NN-40:
          arg-groups:
            - {"n_neighbors": 40, "diversify_prob": [0.0, 1.0],
               "pruning_degree_multiplier":[1.0, 2.0], "leaf_size": 36}
          query-args: [[0.0, 0.02, 0.04, 0.08, 0.12, 0.16, 0.20, 0.24, 0.28, 0.32]]
        NN-60:
          arg-groups:
            - {"n_neighbors": 60, "diversify_prob": 0.0,
               "pruning_degree_multiplier":[2.0, 3.0], "leaf_size": 48}
          query-args: [[0.0, 0.04, 0.08, 0.12, 0.16, 0.20, 0.24, 0.28, 0.32, 0.36]]
    faiss-ivf:
      docker-tag: ann-benchmarks-faiss
      module: ann_benchmarks.algorithms.faiss
      constructor: FaissIVF
      base-args: ["@metric"]
      run-groups:
        base:
          args: [[32,64,128,256,512,1024,2048,4096,8192]]
          query-args: [[1, 5, 10, 50, 100, 200]]
    hnsw(faiss):
     docker-tag: ann-benchmarks-faiss
     module: ann_benchmarks.algorithms.faiss_hnsw
     constructor: FaissHNSW
     base-args: ["@metric"]
     run-groups:
       M-4:
         arg-groups:
           - {"M": 4,  "efConstruction": 500}
         query-args: [[10, 20, 40, 80, 120, 200, 400, 600, 800]]
       M-8:
         arg-groups:
           - {"M": 8,  "efConstruction": 500}
         query-args: [[10, 20, 40, 80, 120, 200, 400, 600, 800]]
       M-12:
         arg-groups:
           - {"M": 12,  "efConstruction": 500}
         query-args: [[10, 20, 40, 80, 120, 200, 400, 600, 800]]
       M-16:
         arg-groups:
           - {"M": 16,  "efConstruction": 500}
         query-args: [[10, 20, 40, 80, 120, 200, 400, 600, 800]]
       M-24:
         arg-groups:
           - {"M": 24,  "efConstruction": 500}
         query-args: [[10, 20, 40, 80, 120, 200, 400, 600, 800]]
       M-36:
         arg-groups:
           - {"M": 36,  "efConstruction": 500}
         query-args: [[10, 20, 40, 80, 120, 200, 400, 600, 800]]
       M-48:
         arg-groups:
           - {"M": 48,  "efConstruction": 500}
         query-args: [[10, 20, 40, 80, 120, 200, 400, 600, 800]]
       M-64:
         arg-groups:
           - {"M": 64,  "efConstruction": 500}
         query-args: [[10, 20, 40, 80, 120, 200, 400, 600, 800]]
       M-96:
         arg-groups:
           - {"M": 96,  "efConstruction": 500}
         query-args: [[10, 20, 40, 80, 120, 200, 400, 600, 800]]
    annoy:
      docker-tag: ann-benchmarks-annoy
      module: ann_benchmarks.algorithms.annoy
      constructor: Annoy
      base-args: ["@metric"]
      run-groups:
        annoy:
          args: [[100, 200, 400]]
          query-args: [[100, 200, 400, 1000, 2000, 4000, 10000, 20000, 40000,
                      100000, 200000, 400000]]
          # This run group produces 3 algorithm instances -- Annoy("angular",
          # 100), Annoy("angular", 200), and Annoy("angular", 400) -- each of
          # which will be used to run 12 different queries.
    milvus:
      docker-tag: ann-benchmarks-milvus
      module: ann_benchmarks.algorithms.milvus
      constructor: Milvus
      base-args: ["@metric"]
      run-groups:
        milvus:
          args: [['IVF_FLAT', 'IVF_SQ8'], [100, 300, 1000, 3000, 10000, 30000]]  # nlist
          query-args: [[1, 3, 10, 30, 100, 300]]  # nprobe (should be <= nlist)